
Game Guides
FREE - In Google Play
VIEW
 

Events A-Z (full list)
Last edited on November 24, 2014
by Celess22
v • d • e
Events
Events by name
A · B · C · D · E · F · G · H · I · J · K · L · M · N · O · P · Q · R · S · T · U · V · W · X · Y · Z     (Removed)
By category
Achievements · Action Bar · Arena · Auction · Bank · Battle.net · Battleground · Buff · Combat · Communication · Companion · Death · GlueXML · Guild · Honor · Instance · Item · Knowledge Base · Loot · Mail · Map · Misc · Movement · Party · Pet · Player · Quest · Skill · Spell · System · Tooltip · Trade · Tradeskill · Trainer · Unit Info · Vehicle
All events · All names
Reference 
e
AddOns
WoW API
Widget API
XML UI
Event API
WoW Lua
Macro API
CVars
Changes

Web API

HOWTOs
Snippets
UI tech.

Categories

→ API events
← Event API
This is a full list of all API events compiled on one page.  It might be more useful to use the normal Event API indexed pages which are simpler to glance at.

This page is aimed at simplifying event finding using the find feature in your browser, looking for a particular word or result. Use the Event API indexed pages if you know the name of the event and want to know what it returns, which might be simpler to glance at and will load faster and will save the wiki bandwidth.

This page is automatically updated from the sub pages. It does not need to be edited. It may however need to be purged sometimes to update with the individual indexed page changes.

advertisement

A
|}

"ACHIEVEMENT_EARNED"
Category: Achievements
 	 Fired when an achievement is gained. (New with patch 3.0)
arg1
The id of the achievement gained.
"ACTIONBAR_HIDEGRID"
Category: Action Bar
 	 Fired when the actionbar numbers disappear, typically when you finish dragging something to the actionbar
arg1
the mouse button used to click the button. Known values: "LeftButton", "RightButton"
arg2
true or false for unknown reason.
"ACTIONBAR_PAGE_CHANGED"
Category: Action Bar
 	 Fired when the actionbar page changes, typically when you press the pageup or pagedown button.
arg1
the mouse button used to click the button. Known values: "LeftButton", "RightButton"
arg2
true or false for unknown reason.
"ACTIONBAR_SHOWGRID"
Category: Action Bar
 	 Fired when the actionbar numbers appear, typically when you drag a spell to the actionbar.
no arguments|}

"ACTIONBAR_SLOT_CHANGED"
Category: Action Bar
 	 Fired when any actionbar slot's contents change; typically the picking up and dropping of buttons. On 4/24/2006,
Slouken stated "ACTIONBAR_SLOT_CHANGED is also sent whenever something changes whether or not the button should be dimmed. The first argument is the slot which changed." This means actions that affect the internal fields of action bar buttons also generate this event for the affected button(s). Examples include the Start and End of casting channeled spells, casting a new buff on yourself, and the cancellation or expiration of a buff on yourself.

arg1
the number of the slot that changed
arg2
true or false for unknown reason.
"ACTIONBAR_UPDATE_COOLDOWN"
Category: Action Bar
 	 Fired when the cooldown for an actionbar or inventory slot starts or stops. Also fires when you log into a new area.
arg1
if the cooldown is starting, the mouse button used to click the button. Known values: "leftButton"
if the cooldown is stopping or you are logging into a new zone, this is nil
"ACTIONBAR_UPDATE_STATE"
Category: Action Bar
 	 Fired when the state of anything on the actionbar changes. This includes cooldown and disabling.
arg1
the mouse button used to click the button. Known values: "LeftButton", "RightButton"
can also be nil
"ACTIONBAR_UPDATE_USABLE"
Category: Action Bar
 	 Fired when something in the actionbar or your inventory becomes usable (after eating or drinking a potion, or entering/leaving stealth; for example). This is affected by rage/mana/energy available, but not by range.
no arguments|}

"ACTIVE_TALENT_GROUP_CHANGED"
Category: Player
 	 Fired when a player switches changes which talent group (dual specialization) is active.
arg1
Number - Index of the talent group that is now active.
"ADDON_ACTION_BLOCKED"
Category: System
 	 (this event doesn't seem to be used anymore, use ADDON_ACTION_FORBIDDEN instead)
"ADDON_ACTION_FORBIDDEN"
Category: System
 	
Fires when an AddOn tries use actions that are always forbidden (movement, targeting, etc.).

If called from an AddOn

arg1
Name of the AddOn that was last involved in the execution path.
arg2
The protected function that was called.
Notes
It's very possible that arg1 will not be the name of the addon that tried to call the protected function.
If called from the chat prompt (/script CastSpellByName("Attack"))

arg1
The protected function that was called.

"ADDON_LOADED"
Category: System
 	 This event fires whenever an AddOn is loaded (fires once for each AddOn loaded if multiple AddOns are being loaded), whether that is during the inital Loading Phase or when an AddOn is loaded using the LoadAddOn("addonname") or UIParentLoadAddon("addonname") function. This event always fires after SavedVariables of the AddOn have been loaded from disk and its OnLoad function has been executed.
arg1
name of the AddOn that was just loaded
"AREA_SPIRIT_HEALER_IN_RANGE"
Category: Death
 		}
"AREA_SPIRIT_HEALER_OUT_OF_RANGE"
Category: Death
 		}
"ARENA_TEAM_INVITE_REQUEST"
Category: Arena
 		}
"ARENA_TEAM_ROSTER_UPDATE"
Category: Arena
 	 This event fires whenever an arena team is opened in the character sheet. It also fires (3 times) when an arena member leaves, joins, or gets kicked. It does NOT fire when an arena team member logs in or out. |}
"ARENA_TEAM_UPDATE"
Category: Arena
 	 This does NOT fire when an arena member joins the team, leaves, gets kicked, logs in/out. Still unsure when this actually fires. |}
"ARENA_OPPONENT_UPDATE"
Category: Arena
 	 ? |}
"ARENA_SEASON_WORLD_STATE"
Category: Arena
 	 ? |}
"AUCTION_BIDDER_LIST_UPDATE"
Category: Auction
 		}
"AUCTION_HOUSE_CLOSED"
Category: Auction
 	 This event is fired when the auction interface is closed.
Note
This event fires twice; once while auction information is still available and once when it is not.
"AUCTION_HOUSE_DISABLED"
Category: Auction
 	 Fired when the auction house is not operational. |}
"AUCTION_HOUSE_SHOW"
Category: Auction
 	 This event is fired when the auction interface is first displayed. This is generally done by right-clicking an auctioneer in a major city. |}
"AUCTION_ITEM_LIST_UPDATE"
Category: Auction
 	 This event is fired when the Auction list is updated. Note that this is not only the case, if the list is completely changed but also if it is sorted (i.e. SortAuctionItems() is called). |}
"AUCTION_MULTISELL_FAILURE"
Category: Auction
 	 Fired when listing of multiple stacks fails (or is aborted?). |}
"AUCTION_MULTISELL_START"
Category: Auction
 	 Fired when the client begins listing of multiple stacks.
arg1
Number - total number of stacks the client has to list.
"AUCTION_MULTISELL_UPDATE"
Category: Auction
 	 Fired when the client lists a stack as part of listing multiple stacks.
arg1
Number - number of stacks listed so far.
arg2
Number - total number of stacks in the current mass-listing operation.
"AUCTION_OWNED_LIST_UPDATE"
Category: Auction
 		}
"AUTOEQUIP_BIND_CONFIRM"
Category: Item,Loot
 	 Fired when the game attempts to autobind bind-on-equip items. |}
"AUTOFOLLOW_BEGIN"
Category: Movement
 	 Fired when you begin automatically following an ally.
arg1
The unit you are following. Not necessarily your target (in case of right-clicking a group member's portrait or using the "/follow" command).
"AUTOFOLLOW_END"
Category: Movement
 	 Fired when the player ceases following an ally
B
"BAG_CLOSED"
Category: Item
 	
Fired when a bag is (re)moved from its bagslot. Fires both for player bags and bank bags.

arg1 
container ID

"BAG_OPEN"
Category: Item
 	
Fired when a bag (NOTE: This is NOT fired for player containers, it's for those bag-like objects that you can remove items from but not put items into) is opened.

arg1 
container ID
"BAG_UPDATE"
Category: Item
 	
Fired when a bags inventory changes. Bag zero, the sixteen slot default backpack, may not fire on login. Upon login (or reloading the console) this event fires even for bank bags. When moving an item in your inventory, this fires multiple times: once each for the source and destination bag. If the bag involved is the default backpack, this event will also fire with a container ID of "-2" (twice if you are moving the item inside the same bag).

arg1 
container ID

"BAG_UPDATE_COOLDOWN"
Category: Item
 	
Fired when a cooldown update call is sent to a bag

arg1 
container ID (may also be nil, 00:47, 15 January 2007 (EST))

"BANKFRAME_CLOSED"
Category: Bank
 	
Fired twice when the bank window is closed.

Only at the first one of them the bank data is still available (GetNumBankSlots(), GetContainerItemLink(), ...)

"BANKFRAME_OPENED"
Category: Bank
 	
Fired when the bank frame is opened

"BARBER_SHOP_APPEARANCE_APPLIED"
Category: Misc
 	
"BARBER_SHOP_CLOSE"
Category: Misc
 	
"BARBER_SHOP_OPEN"
Category: Misc
 	
"BARBER_SHOP_SUCCESS"
Category: Misc
 	

"BATTLEFIELDS_CLOSED"
Category: Battleground
 	
Fired when the battlegrounds signup window is closed.


"BATTLEFIELDS_SHOW"
Category: Battleground
 	
Fired when the battlegrounds signup window is opened.

"BATTLEFIELD_MGR_EJECTED"
Category: Misc
 	
?

"BATTLEFIELD_MGR_EJECT_PENDING"
Category: Misc
 	
?

"BATTLEFIELD_MGR_ENTERED"
Category: Misc
 	
?

"BATTLEFIELD_MGR_ENTRY_INVITE"
Category: Misc
 	
?

"BATTLEFIELD_MGR_QUEUE_INVITE"
Category: Misc
 	
?

"BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE"
Category: Misc
 	
?

"BATTLEFIELD_MGR_STATE_CHANGE"
Category: Misc
 	
?

"BILLING_NAG_DIALOG"
Category: Misc
 	

"BIND_ENCHANT"
Category: Item
 	
Fired when Enchanting an unbound item.

"BN_BLOCK_LIST_UPDATED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_CLOSED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_CREATE_FAILED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_CREATE_SUCCEEDED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_INVITE_FAILED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_INVITE_SUCCEEDED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_JOINED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_LEFT"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_MEMBER_JOINED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_MEMBER_LEFT"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_MEMBER_UPDATED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_MESSAGE_BLOCKED"
Category: Battle.net
 	
"BN_CHAT_CHANNEL_MESSAGE_UNDELIVERABLE"
Category: Battle.net
 	
"BN_CHAT_WHISPER_UNDELIVERABLE"
Category: Battle.net
 	
"BN_CONNECTED"
Category: Battle.net
 	
"BN_CUSTOM_MESSAGE_CHANGED"
Category: Battle.net
 	
"BN_CUSTOM_MESSAGE_LOADED"
Category: Battle.net
 	
"BN_DISCONNECTED"
Category: Battle.net
 	
"BN_FRIEND_ACCOUNT_OFFLINE"
Category: Battle.net
 	
"BN_FRIEND_ACCOUNT_ONLINE"
Category: Battle.net
 	
"BN_FRIEND_INFO_CHANGED"
Category: Battle.net
 	
"BN_FRIEND_INVITE_ADDED"
Category: Battle.net
 	
"BN_FRIEND_INVITE_LIST_INITIALIZED"
Category: Battle.net
 	
"BN_FRIEND_INVITE_REMOVED"
Category: Battle.net
 	
"BN_FRIEND_INVITE_SEND_RESULT"
Category: Battle.net
 	
"BN_FRIEND_LIST_SIZE_CHANGED"
Category: Battle.net
 	
"BN_FRIEND_TOON_OFFLINE"
Category: Battle.net
 	
"BN_FRIEND_TOON_ONLINE"
Category: Battle.net
 	
"BN_MATURE_LANGUAGE_FILTER"
Category: Battle.net
 	
"BN_NEW_PRESENCE"
Category: Battle.net
 	
"BN_REQUEST_FOF_FAILED"
Category: Battle.net
 	
"BN_REQUEST_FOF_SUCCEEDED"
Category: Battle.net
 	
"BN_SELF_OFFLINE"
Category: Battle.net
 	
"BN_SELF_ONLINE"
Category: Battle.net
 	
"BN_SYSTEM_MESSAGE"
Category: Battle.net
 	
"BN_TOON_NAME_UPDATED"
Category: Battle.net
 		
C
"CALENDAR_ACTION_PENDING"
Category: Calendar
 	
Fired when the calendar API is busy or free

arg1
busyFlag
"CALENDAR_CLOSE_EVENT"
Category: Calendar
 	
"CALENDAR_EVENT_ALARM"
Category: Calendar
 	
"CALENDAR_NEW_EVENT"
Category: Calendar
 	
"CALENDAR_OPEN_EVENT"
Category: Calendar
 	
Fired after calling CalendarOpenEvent once the event data has been retrieved from the server

"CALENDAR_UPDATE_INVITE_LIST"
Category: Calendar
 	
Fired after CalendarEventSortInvites once the invite list has been sorted.

"CALENDAR_UPDATE_ERROR"
Category: Calendar
 	
"CALENDAR_UPDATE_EVENT"
Category: Calendar
 	
"CALENDAR_UPDATE_EVENT_LIST"
Category: Calendar
 	
"CALENDAR_UPDATE_PENDING_INVITES"
Category: Calendar
 	
"CANCEL_LOOT_ROLL"
Category: Loot
 	
Fired when a player cancels a roll on an item

arg1
rollID
"CANCEL_SUMMON"
Category: Player
 	
"CHANNEL_COUNT_UPDATE"
Category: Misc
 	
Fired when number of players in a channel changes but only if this channel is visible in ChannelFrame (it mustn't be hidden by a collapsed category header)

arg1
channel id (item number in Blizzards ChannelFrame -> quod vide API GetChannelDisplayInfo)
arg2
number of players in channel
"CHANNEL_FLAGS_UPDATED"
Category: Misc
 	
Fired when user changes selected channel in Blizzards ChannelFrame

arg1
channel id (item number in Blizzards ChannelFrame -> quod vide API GetChannelDisplayInfo)
"CHANNEL_INVITE_REQUEST"
Category: Communication
 	
"CHANNEL_PASSWORD_REQUEST"
Category: Misc
 	
Fired when user is asked for a password (normally after trying to join a channel without a password or with a wrong one)

arg1
channel name
"CHANNEL_ROSTER_UPDATE"
Category: Misc
 	
Fired when user changes selected channel in Blizzards ChannelFrame or number of players in currently selected channel changes

arg1
channel id (item number in Blizzards ChannelFrame -> quod vide API GetChannelDisplayInfo)
arg2
number of players in channel
"CHANNEL_UI_UPDATE"
Category: Misc
 	
Fired when Channel UI should change (e.g. joining / leaving a channel causes this event to fire)

"CHANNEL_VOICE_UPDATE"
Category: Misc
 	
arg1
unknown
arg2
unknown
arg3
unknown
"CHARACTER_POINTS_CHANGED"
Category: Player
 	
Fired when the player's available talent points change

arg1
indicates number of talent points changed: -1 indicates one used (learning a talent), 1 indicates one gained (leveling)
"CHAT_MSG_ACHIEVEMENT"
Category: Communication,Guild,Achievements
 	
Fired when a player in your vicinity completes an achievement.

arg1
The full body of the broadcast message.
arg2, arg5
The name of player who has just completed the achievement.
arg7, arg8
Some integer.
"CHAT_MSG_ADDON"
Category: Communication
 	
<Added in Patch 1.12> 
Fired when the client receives a message from SendAddonMessage 
Since patch 4.1, you must register the addon prefix with RegisterAddonMessagePrefix otherwise, events triggered by other players are blocked.

arg1
prefix
arg2
message
arg3
distribution type ("PARTY", "RAID", "GUILD", "BATTLEGROUND" or "WHISPER")
arg4
sender
"CHAT_MSG_AFK"
Category: Communication
 	
Fired when the client receives an AFK auto-response

arg1
AFK response message
arg2
author
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_BATTLEGROUND"
Category: Communication,Battleground
 	
<Added in Patch 1.12> 
Fired when a message is received through the battleground group channel

arg1
chat message
arg2
author
arg3
language
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_BATTLEGROUND_LEADER"
Category: Communication,Battleground
 	
<Added in Patch 1.12> 
Fired when a message is received from the leader of the battleground group

arg1
chat message
arg2
author
arg3
language
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_BG_SYSTEM_ALLIANCE"
Category: Communication,Battleground
 	
Fired for alliance specific events in the battleground such as assaulting a graveyard.

arg1
Battleground Message (eg. "The Alliance has taken the Blacksmith!")
"CHAT_MSG_BG_SYSTEM_HORDE"
Category: Communication,Battleground
 	
Fired for horde specific events in the battleground such as assaulting a graveyard.

arg1
Battleground Message (eg. "The Horde has taken the Blacksmith!")
"CHAT_MSG_BG_SYSTEM_NEUTRAL"
Category: Communication,Battleground
 	
Fired for non faction specific events in the battlegrounds such as the battle start announcement.

arg1
Battleground Message (eg. "Let the battle for Warsong Gulch begin.")
"CHAT_MSG_BN_CONVERSATION"
Category: Battle.net,Communication
 	
"CHAT_MSG_BN_CONVERSATION_LIST"
Category: Battle.net,Communication
 	
"CHAT_MSG_BN_CONVERSATION_NOTICE"
Category: Battle.net,Communication
 	
"CHAT_MSG_BN_INLINE_TOAST_ALERT"
Category: Battle.net,Communication
 	
"CHAT_MSG_BN_INLINE_TOAST_BROADCAST"
Category: Battle.net,Communication
 	
"CHAT_MSG_BN_INLINE_TOAST_BROADCAST_INFORM"
Category: Battle.net,Communication
 	
Fired when the Bnet Real ID Broadcast Message is changed or from API BNSetCustomMessage

arg1
Broadcast Message
arg11
Chat lineID
"CHAT_MSG_BN_INLINE_TOAST_CONVERSATION"
Category: Battle.net,Communication
 	
arg1
toast message (ie. FRIEND_OFFLINE, FRIEND_ONLINE)
arg2
author
arg11
Chat lineID
arg13
Bnet presenceID
"CHAT_MSG_BN_WHISPER"
Category: Battle.net,Communication
 	
arg1
chat message
arg2
author
arg6
AFK/DND/GM "CHAT_FLAG_"..arg6 flags
arg11
Chat lineID
arg13
Bnet presenceID
"CHAT_MSG_BN_WHISPER_INFORM"
Category: Battle.net,Communication
 	
arg11
Chat lineID
arg13
Bnet presenceID
"CHAT_MSG_CHANNEL"
Category: Communication
 	
Fired when the client receives a channel message.

arg1
chat message
arg2
author
arg3
language
arg4
channel name with number ex: "1. General - Stormwind City"
zone is always current zone even if not the same as the channel name
arg5
target
second player name when two users are passed for a CHANNEL_NOTICE_USER (E.G. x kicked y)
arg6
AFK/DND/GM "CHAT_FLAG_"..arg6 flags
arg7
zone ID used for generic system channels (1 for General, 2 for Trade, 22 for LocalDefense, 23 for WorldDefense and 26 for LFG)
not used for custom channels or if you joined an Out-Of-Zone channel ex: "General - Stormwind City"
arg8
channel number
arg9
channel name without number (this is _sometimes_ in lowercase)
zone is always current zone even if not the same as the channel name
arg11
Chat lineID used for reporting the chat message.
arg12
Sender GUID
"CHAT_MSG_CHANNEL_JOIN"
Category: Communication
 	
Fired when someone joins a chat channel you are in

arg1
seems to be empty
arg2
Name of the player that joined
arg3
seems to be empty again
arg4
Number and name of the channel (e.g. "5. MyOwnChannel")
arg8
Channel number
arg9
channel name without number (this is sometimes in lowercase)
"CHAT_MSG_CHANNEL_LEAVE"
Category: Communication
 	
Fired when a player leaves a channel that you are currently inside.

arg1
Appears to be left blank
arg2
Player name that left
arg4
Channel name with number
arg7
Appears to be left zero and no longer the channel number
arg8
Channel number
arg9
Channel name without number
"CHAT_MSG_CHANNEL_LIST"
Category: Communication
 	
Fired when ListChannels() or ListChannelByName() is called, and the message is displayed in the chat frame.

arg1
The list of values displayed by ListChannels() or ListChannelByName() in one string.
arg4
The number and name of the channel the message came from. ie: "1. General"
"CHAT_MSG_CHANNEL_NOTICE"
Category: Communication
 	
Fired when you enter or leave a chat channel (or a channel was recently throttled)

arg1
type ( "YOU_JOINED" if you joined a channel, or "YOU_LEFT" if you left, or "THROTTLED" if channel was throttled )
arg4
Channel name with number (e.g. "6. TestChannel")
arg7
Channel Type (e.g. 0 for any user channel, 1 for system-channel "General", 2 for "Trade")
arg8
Channel Number
arg9
Channel name without number
"CHAT_MSG_CHANNEL_NOTICE_USER"
Category: Communication
 	
Fired when something changes in the channel like moderation enabled, user is kicked, announcements changed and so on. CHAT_*_NOTICE in GlobalStrings.lua has a full list of available types.

arg1
type ("ANNOUNCEMENTS_OFF", "ANNOUNCEMENTS_ON", "BANNED", "OWNER_CHANGED", "INVALID_NAME", "INVITE", "MODERATION_OFF", "MODERATION_ON", "MUTED", "NOT_MEMBER", "NOT_MODERATED", "SET_MODERATOR", "UNSET_MODERATOR" )
arg2
If arg5 has a value then this is the user affected ( eg: "Player Foo has been kicked by Bar" ), if arg5 has no value then it's the person who caused the event ( eg: "Channel Moderation has been enabled by Bar" )
arg4
Channel name with number
arg5
Player that caused the event (eg "Player Foo has been kicked by Bar" )
"CHAT_MSG_COMBAT_FACTION_CHANGE"
Category: Combat
 	
Fires when player's faction changes. i.e.: "Your reputation with Timbermaw Hold has very slightly increased." -- NEW 1.9

arg1
chat message
arg11
Chat lineID
"CHAT_MSG_COMBAT_HONOR_GAIN"
Category: Honor,Combat
 	
Fired when the player gains any amount of honor, anything from an honorable kill to bonus honor awarded.

arg1
chat message (format: "%s dies, honorable kill Rank: %s (Estimated Honor Points: %d)" or "You have been awarded %d honor.")
"CHAT_MSG_COMBAT_MISC_INFO"
Category: Misc
 	
Fires when your equipment takes durability loss from death, and likely other situations as well.(no longer fires on reputation changes as of 1.9)

"CHAT_MSG_COMBAT_XP_GAIN"
Category: Player
 	
Fired when you gain XP from killing a creature or finishing a quest. Does not fire if you gain no xp from killing a creature.

arg1
chat message
"CHAT_MSG_DND"
Category: Communication
 	
Fired when the client receives a Do-Not-Disturb auto-response

arg1
DND response message
arg2
author
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_EMOTE"
Category: Communication
 	
Fired on sending or receiving a custom emote (one used by /e, /emote or a send chat message command with the emote flag)

arg1
Message that was sent/received
arg2
Name of the player who sent the message
arg11
Chat lineID used for reporting the chat message.
arg12
Sender GUID
"CHAT_MSG_FILTERED"
Category: Communication
 	
"CHAT_MSG_GUILD"
Category: Communication,Guild
 	
Fired when a message is sent or received in the Guild channel.

arg1
Message that was sent
arg2
Author
arg3
Language that the message was sent in
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_GUILD_ACHIEVEMENT"
Category: Communication,Guild,Achievements
 	
Fired when a guild member completes an achievement.

arg1
The full body of the achievement broadcast message.
arg2, arg5
Guildmember Name
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_IGNORED"
Category: Communication
 	
Fired when you whisper a player that is ignoring you When testing this event the character name is sent twice as arg1 and arg2, Blizzard appears to use arg2 and ignores arg1.

arg1
Character name of who you tried to message
arg2
Character name of who you tried to message
"CHAT_MSG_LOOT"
Category: Loot
 	
Fired when loot text is sent to the chat window (someone selects need, greed, passes, rolls, receives). This also fires messages like "Person creates <item>" via tradeskills, and "Person receives <item>" via a trade window.

arg1
Chat message
arg11
Chat lineID
"CHAT_MSG_MONEY"
Category: Loot
 	
Fired when a unit loots money.

arg1
Chat message
"CHAT_MSG_MONSTER_EMOTE"
Category: Communication
 	
Fired for emotes from a monster, such as 'Murloc Forager attempts to run away in fear!'

arg1
The body of the emote: '%s attempts to run away in fear!'
arg2
The name of the monster: 'Murloc Forager'
(Note: As of 1.12 arg1 now contains a %s string variable for where the mob name should be placed)

"CHAT_MSG_MONSTER_SAY"
Category: Communication
 	
Fired when a NPC says something.

arg1
Message
arg2
NPC name
arg3
Language used
arg4
Unused
arg5
Receiver
"CHAT_MSG_MONSTER_WHISPER"
Category: Communication
 	
Fired when a NPC whispers you something

"CHAT_MSG_MONSTER_PARTY"
Category: Communication
 	
"CHAT_MSG_MONSTER_YELL"
Category: Communication
 	
Fired when a NPC yells, example would be the yells during an Alterac Valley from the Herald or a raid boss.

arg1
Message
arg2
NPC Name (eg: Onyxia)
"CHAT_MSG_OFFICER"
Category: Communication
 	
Fired when a message is sent or received in the Guild Officer channel.

arg1
Message that was received
arg2
Author
arg3
Language used
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_OPENING"
Category: Communication
 	
"CHAT_MSG_PARTY"
Category: Communication,Party
 	
Fired when a message is sent or received in the Party channel.

arg1
Message that was received
arg2
Author
arg3
Language used
arg11
Chat lineID
arg12
Sender GUID

"CHAT_MSG_PARTY_LEADER"
Category: Communication,Party
 	
Fired when a message is sent or received by the party leader.

arg1
Message that was received
arg2
Author
arg3
Language used
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_PET_INFO"
Category: Communication
 	
"CHAT_MSG_RAID"
Category: Communication,Party
 	
Fired when a message is sent or received in the Raid.

arg1
chat message
arg2
author
arg3
language
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_RAID_BOSS_EMOTE"
Category: Communication
 	
arg1
emote message
arg2
Name of the boss
"CHAT_MSG_RAID_BOSS_WHISPER"
Category: Communication
 	
"CHAT_MSG_RAID_LEADER"
Category: Communication,Party
 	
Fired when a message is sent or received from the raid leader.

arg1
chat message
arg2
author
arg3
language
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_RAID_WARNING"
Category: Communication,Party
 	
Fired when a warning message is sent or received from the raid leader.

arg1
chat message
arg2
author
arg3
language
arg11
Chat lineID
arg12
Sender GUID
"CHAT_MSG_RESTRICTED"
Category: Communication
 	
"CHAT_MSG_SAY"
Category: Communication
 	
Fired when a message is sent or received in the Say channel.

arg1
chat message
arg2
author
arg3
language
arg11
Chat lineID used for reporting the chat message.
arg12
Sender GUID
Example:
Place this:RegisterEvent("CHAT_MSG_SAY"); in the <OnLoad>/</OnLoad> section of your MyMod.xml file.
Then, have an if (event == "CHAT_MSG_SAY") then MyMod_Say(event, arg1, arg2, arg3); end line, or something like it, in the <OnEvent>/</OnEvent> section

of your MyMod.xml file.

Then, have a function like the following in your MyMod.lua file:
function MyMod_Say(event, arg1, arg2, arg3)
  PrevMsg = arg1;
  PrevPlyr = arg2;
  PrevLang = arg3;
end
This would store the previous message, player who said it, and language it was said in into some variables.

"CHAT_MSG_SKILL"
Category: Player,Skill
 	
Fired when some chat messages about skills are displayed.

arg1
The content of the chat message.
arg1 formats are found in Blizzard's GlobalStrings.lua. Some possibilities:

ERR_SKILL_GAINED_S (eg. "You have gained the Blacksmithing skill.")
ERR_SKILL_UP_SI (eg. "Your skill in Cooking has increased to 221.")
"CHAT_MSG_SYSTEM"
Category: Communication
 	
Fired when a system chat message (they are displayed in yellow) is received.

arg1
The content of the chat message.
arg1 formats are found in Blizzard's GlobalStrings.lua. Some possibilities:

ERR_LEARN_RECIPE_S (eg. "You have learned how to create a new item: Bristle Whisker Catfish.")
MARKED_AFK_MESSAGE (eg. "You are now AFK: Away from Keyboard")
Note: Be very careful with assuming when the event is actually sent. For example, "Quest accepted: Quest Title" is sent before the quest log updates, so at the time of the event the player's quest log does not yet contain the quest. Similarly, "Quest Title completed." is sent before the quest is removed from the quest log, so at the time of the event the player's quest log still contains the quest.

"CHAT_MSG_TARGETICONS"
Category: Communication
 	
Fired when a target marker is set. This is used by the chat filter, if the player is watching target markers in chat output (in the Filters right-click menu, under Other, look for Target Icons).

arg1
The formatted message to be displayed in the chat window.
arg12
Some kind of number; no more is known at the time of writing. (Yes, that's a "12", not a typo for "2".)
arg1 is formatted from the global variable TARGET_ICON_SET, which by default in an English client is set to the string

"|Hplayer:%s|h[%s]|h sets |TInterface\\TargetingFrame\\UI-RaidTargetingIcon_%d:0|t on %s."
The other arguments are unused.

"CHAT_MSG_TRADESKILLS"
Category: Communication
 	
"CHAT_MSG_TEXT_EMOTE"
Category: Communication
 	
Fired for emotes with an emote token. /dance, /healme, etc

arg1
Emote Message
arg2
Name of person who emoted
arg11
Chat lineID used for reporting the chat message.
arg12
Sender GUID
"CHAT_MSG_WHISPER"
Category: Communication
 	
Fired when a whisper is received from another player.

arg1
Message received
arg2
Author
arg3
Language (or nil if universal, like messages from GM) (always seems to be an empty string; argument may have been kicked because whispering in non-standard language doesn't seem to be possible [any more?])
arg6
status (like "DND" or "GM")
arg7
(number) message id (for reporting spam purposes?) (default: 0)
arg8
(number) unknown (default: 0)
arg11
Chat lineID used for reporting the chat message.
arg12
Sender GUID
"CHAT_MSG_WHISPER_INFORM"
Category: Communication
 	
Fired when the player sends a whisper to another player

arg1
Message sent
arg2
Player who was sent the whisper
arg3
Language
arg11
Chat lineID
arg12
Receiver GUID
"CHAT_MSG_YELL"
Category: Communication
 	
Fired when a message is sent or received in the Yell channel.

arg1
Message that was received
arg2
Author
arg3
Language used
arg11
Chat lineID used for reporting the chat message.
arg12
Sender GUID
"CINEMATIC_START"
Category: Misc
 	
"CINEMATIC_STOP"
Category: Misc
 	
"CLOSE_INBOX_ITEM"
Category: Mail
 	
"CLOSE_TABARD_FRAME"
Category: Misc
 	
Fired when the guild dress frame is closed

"CLOSE_WORLD_MAP"
Category: Map
 	
Supposed to fire whenever the world map is closed/hidden, though it doesn't. A workaround for this is to use "WORLD_MAP_UPDATE" to set a global variable to use elsewhere with an OnUpdate function; e.g.

local Map_Changed = false;

function MyAddon_OnEvent()
 if ( (event == "WORLD_MAP_UPDATE") and WorldMapFrame:IsVisible() ) then
  Map_Changed = true;
 end
end

function MyAddon_OnUpdate()
 if ( (Map_Changed) and not WorldMapFrame:IsVisible() ) then
  ...do this...
  Map_Changed = false;
 end
end
When the second function is called, it checks to see if the map has been opened/closed (Map_Changed), then checks to see if the map is currently open (WorldMapFrame). 
The effect is a code that executes only w